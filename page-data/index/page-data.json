{
    "componentChunkName": "component---src-pages-index-js",
    "path": "/",
    "result": {"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"2cd64495-1142-5073-9096-21f082809814","excerpt":"알고리즘 문제를 풀던 중 진법을 바꿔야하는 문제가 있었고, JavaScript의 Number 객체의 toString() 메소드를 이용하여 쉽게 진법을 바꾸는 방법을 알게 되었습니다. Number.prototype.toString() 이란? 특정한 Number 객체를 나타내는 문자열을 반환합니다. Number.prototype.toString() - JavaScript | MDN 구문 매개변수  (Optional) 진수를 나타내는 기수로 2 ~ 36사이의 정수 (default 10) 반환 값 Number 객체를 명시하는 문자열 예외  radix에 2 ~ 36사이의 정수가 아닌 값이 주어지면 RangeError 발생 예제 특이한 점은 음수에 대해서 toString()을 할 경우 -부호가 그대로 유지되고, 음수의 절댓값이 진수 변환을 한다는 것이다. 참조 Number.prototype.toString() - JavaScript | MDN","frontmatter":{"categories":"JavaScript","title":"Number.prototype.toString()","date":"March 21, 2022"},"fields":{"slug":"/toString/"}}},{"node":{"id":"02261a76-ede7-56be-a254-f51ba530db83","excerpt":"toUpperCase() toUpperCase() 메서드는 문자열을 대문자로 변환해 반환합니다. 구문 반환값 대문자로 변환한 새로운 문자열 예외   등을 사용해 이나 에서 호출 시. 예제 문자열이 아닌 의 문자열 변환 의 가 문자열이 아니고, 와 도 아니면 자동으로 문자열로 변환합니다. toLowerCase() toLowerCase() 메서드는 문자열을 소문자로 변환해 반환합니다. 구문 반환값 호출 문자열의 소문자로 변환한 새로운 문자열 참조 String.prototype.toUpperCase() - JavaScript | MDN (mozilla.org) String.prototype.toLowerCase() - JavaScript | MDN (mozilla.org)","frontmatter":{"categories":"JavaScript","title":"toUpperCase, toLowerCase","date":"January 30, 2022"},"fields":{"slug":"/to_upper_case-to_lower_case/"}}},{"node":{"id":"50258bff-b8b5-58c3-9c46-851eab0f31f8","excerpt":"sqrt C/C++에서 제곱근을 구해주는 함수입니다. 함수 원형과 사용법 헤더파일 C: <math.h> C++:  함수 원형 double sqrt(double x) float sqrt(float x) long double sqrt(long double x) 사용법 매개변수로 들어온 숫자에 루트를 적용한 값을 반환합니다. ex) 루트 9를 구하고 싶으면 참조 [C언어/C++] pow, sqrt 함수에 대해서(루트함수, 제곱, 제곱근) (tistory.com) 함수 원형과 사용법 헤더파일 함수 원형 사용법","frontmatter":{"categories":"CPP","title":"sqrt","date":"January 30, 2022"},"fields":{"slug":"/sqrt/"}}},{"node":{"id":"6b3c69a7-b7c8-5b11-8f2c-e2c55281cf31","excerpt":"to_string c++에서 int를 string으로 변경하는 함수입니다. 함수 원형과 설명 헤더파일 함수 원형 string to_string (int num); string to_string (long num); string to_string (long long num); string to_string (unsigned num); string to_string (unsigned long num); string to_string (unsigned long long num); string to_string (float num); string to_string (double num); string to_string (long double num); 설명 to_string 함수는 숫자 자료형의 데이터를 안전하게 스트링 자료형으로 변경하도록 하는 함수입니다. 함수 오버로딩(overloading)을 통해 하나의 함수명에 다른 매개변수가 올 수 있습니다. 참조 [C++] to_string 함…","frontmatter":{"categories":"CPP","title":"to_string","date":"January 30, 2022"},"fields":{"slug":"/to_string/"}}},{"node":{"id":"7dc12f75-1ab7-597e-8cfb-849e2ebb85cf","excerpt":"Set C++의 Set은 노드 기반 컨테이너이며 균형 이진트리로 구현되어 있습니다. Key라 불리는 원소들의 집합으로 이루어진 컨테이너 입니다.(Key 중복X) 원소가 삽입되면 자동으로 정렬되고, default 정렬 기준은 오름차순입니다. 사용법  헤더 파일에 들어있습니다. 기본 선언 방법은  입니다. 생성자 멤버 함수 begin() 반환: 맨 첫번째 원소를 가리키는 반복자를 리턴(참조) 예시:  end() 반환: 맨 마지막 원소의 다음을 가리키는 반복자를 리턴(참조) 예시:  rbegin(), rend() begin(), end()와 반대로 작동하는 멤버함수 역으로 출력하고 싶을 때 사용 예시: clear() 모든 원소를 제거, 초기화할 때 사용 예시:  count(k) 원소 k의 갯수를 반환, set은 항상 0, 1을 반환 예시:  empty() 비어있는지 확인, 반환은 true, false 예시:  insert(k) 원소 k를 삽입합니다. 반환:  pair.first: 삽입한…","frontmatter":{"categories":"CPP","title":"Set","date":"January 28, 2022"},"fields":{"slug":"/cpp-set/"}}},{"node":{"id":"f0988307-1c99-525c-8668-bc6b06a4d0d5","excerpt":"Math.max() Math.max() 함수는 입력값으로 받은 0개의 이상의 숫자 중 가장 큰 숫자를 반환한다. 문법 매개변수  가장 큰 값을 선택하고 반환할 0개 이상의 숫자 반환 값 입력된 숫자 중 가장 큰 숫자를 반환한다. 만약 인수 중 하나라도 숫자로 변환하지 못한다면 을 반환한다. 매개변수를 제공하지 않은 경우 결과는  이다. 설명 max()는 Math의 정적 메서드이기 때문에 항상 Math.max()로 사용해야 한다. 예제 배열에서 최대값 찾기 reduce 사용 spread operator 사용 Function.prototpye.apply() 사용 ⚠️ 배열의 요소가 너무 많으면 잘못된 값을 반환할 수 있다고 한다. both spread () and  will either fail or return the wrong result if the array has too many elements, because they try to pass the array elements a…","frontmatter":{"categories":"JavaScript","title":"Math.max()","date":"January 27, 2022"},"fields":{"slug":"/Math-max/"}}},{"node":{"id":"72bfe130-275b-59bb-bcce-f6b57fa8696f","excerpt":"EOF 가끔 백준 알고리즘 문제를 풀다보면 입력의 마지막 조건을 알려주지 않는 문제들이 있다. 이럴 때 사용하는 케이스들을 정리하려고 한다. 1. scanf()가 입력받은 인자의 갯수를 리턴하는 특성 활용 scanf()는 입력받은 갯수를 리턴하기 때문에 이를 활용하여 입력을 받았는지 확인할 수 있다. 2. scanf()를 EOF와 직접 비교 EOF = End Of File을 뜻한다. 즉, 파일의 끝에 도달했는지 확인하여 입력을 받았는지 확인할 수 있다. 3. EOF가 상수 -1로 정의되어 있는 특성 활용 EOF는 상수 -1로 정의 되어 있기 때문에 EOF인지 확인하는 방법과 -1인지 확인하는 방법이 같다. 4. cin.eof() 활용 cin으로 입력 받은 값이 없으면 cin.eof()는 true를 반환한다. 이것을 활용하여 입력을 받았는지 확인할 수 있다. 참조 C++ EOF 처리 방법 ( 백준 10951 A+B - 4 ) (tistory.com) 1. scanf()가 입력받은 인…","frontmatter":{"categories":"CPP","title":"EOF","date":"January 27, 2022"},"fields":{"slug":"/eof/"}}},{"node":{"id":"66f3daff-3936-54ed-a88e-cb5ff3597846","excerpt":"유클리드 호제법 또는 유클리드 알고리즘은 2개의 자연수의 최대공약수를 구하는 알고리즘의 하나이다. 호제법이란? 두 수를 나누어 결국 원하는 수를 얻는 알고리즘을 나타낸다. 정의 2개의 자연수 a, b에 대해서 a를 b로 나눈 나머지를 r이라 하면 a와 b의 최대공약수는 b와 r의 최대공약수와 같다. 정리 a와 b의 최대공약수를 (a, b) = r이라고 하면 (a, b) = (b, r) 📝예제 (1071, 1029) = (1029, 42) = (42, 21) = (21, 0) = 21 증명 a, b가 정수이고 a≥b라고 하자. 그러면 a = bq + r을 만족하는 유일한 q, r이 존재한다. (0≤ r < b) (a, b)의 최대공약수가 d이면, a = dα, b = dβ이고 α, β는 서로소(최대공약수가 1)이다. 알고리즘 알고리즘을으로 나타내면 다음과 같습니다. 참조 썽 :: [대수학&정수론]유클리드 호제법의 증명 (tistory.com) 유클리드 호제법 - 위키백과, 우리 모두…","frontmatter":{"categories":"Algorithm","title":"Euclidean algorithm","date":"January 22, 2022"},"fields":{"slug":"/euclidean-algorithm/"}}},{"node":{"id":"c3706ced-92da-5fe3-b2c5-91754f6e00f9","excerpt":"n이 양의 정수일 때, ϕ(n)를 구하는 함수이다. ϕ(n)은 1부터 n까지의 n과 서로소(최대공약수가 1인 관계)인 수를 나타낸다. 항등식 만약 두 정수 m, n이 서로소라면, 다음이 성립힌다. ϕ(mn) = ϕ(m)ϕ(n) 오일러 피 함수 값은 소인수(소수의 인수)를 통해  다음과 같이 구할 수 있다. https://wikimedia.org/api/rest_v1/media/math/render/svg/f435f9cc2f15d34d49245f30d4d85a8cc678fa9d 오일러 곱 공식이라고 불린다. 📝 예제 https://wikimedia.org/api/rest_v1/media/math/render/svg/3ec5709cc7b8119ce7526f223fb42bfd84304286 알고리즘 1부터 n까지 증가하면서 최대공약수가 1인 확인하여 구하는 방법 오일러 곱 공식 구현 위의 float 사용하지 않는 방법 특징 p가 소수일 때, p^k의 오일러 피 함수의 값은 https:/…","frontmatter":{"categories":"Algorithm","title":"Euler’s phi","date":"January 22, 2022"},"fields":{"slug":"/euler-phi/"}}},{"node":{"id":"c72c5538-0d5c-55f6-a921-eabe94264015","excerpt":"메모리 상에 가상의 테이블을 저장 재퀴 쿼리를 이용하여 실제로 테이블을 생성하거나 데이터 삽입(INSERT)을 하지 않아도 가상 테이블을 생성할 수 있다. 📝예시 hour(컬럼)이  초기값 0부터 제어문에 합당하는 23까지의 데이터를 갖는 가상 테이블 생성 📝예시","frontmatter":{"categories":"SQL","title":"WITH RECURSIVE","date":"January 21, 2022"},"fields":{"slug":"/with-recursive/"}}},{"node":{"id":"07d6d208-1c69-5bf1-b465-ceea328b9472","excerpt":"1. HTTP(Hyper Text Transfer Protocol) 서버와 클라이언트가 데이터를 주고받기 위한 프로토콜입니다. 즉 서버는 80번 포트에서 요청을 대기하고 있고, 클라이언트는 80번 포트로 요청을 보내게 됩니다. HTTP 구조 HTTP는 애플리케이션 레벨의 프로토콜로 TCP/IP 위에서 동작합니다. HTTP는 상태를 가지고 있지 않는 Stateless 프로토콜이며, Method, Path, Version, Headers, Body 등으로 구성되어 있습니다. 사진 하지만 HTTP는 암호화가 되지 않은 평문 데이트를 전송하는 프로토콜이기 때문에, 제3자가 정보를 조회할 수 있는 보안적인 문제가 있다. 2. HTTPS(Hyper Text Transfer Protocol Secure) HTTP에 데이터 암호화가 추가된 프로토콜입니다. 443번 포트를 사용하며, 제3자가 정보를 볼 수 없도록 암호화를 지원합니다. HTTPS의 동작 과정 HTTPS는 대칭키 암호화와 비대칭 키 …","frontmatter":{"categories":"네트워크 면접","title":"HTTP와 HTTPS","date":"January 19, 2022"},"fields":{"slug":"/http-https/"}}},{"node":{"id":"b1a183d0-fade-50d2-9919-ae25ce20a07a","excerpt":"REGEXP는 LIKE를 이용한 검색과 달리 Regular Expression(정규 표현식)을 이용해 검색한다. REGEXP를 사용하면 SQL에서 정규표현식을 활용하여 기본 연산자보다 복잡한 문자열 조건을 걸어 데이터를 검색할 수 있다. Regular Expression(정규 표현식) 정규 표현식은 특정한 규칙을 가진 문자열의 집합을 표현하는데 사용하는 형식 언어이다. 문자열을 처리하는 방법 중의 하나로, 특정한 조건의 문자를 검색하거나 치환할 때 매우 간쳔하게 처리할 수 있도록 해준다. 정규 표현식은 Pattern을 사용해 문자열을 처리한다. Matching Pattern 기능 예시 설명 . 문자 하나 ”…” 문자열의 길이가 세 글자 이상인 것을 찾음. I I로 구분된 문자에 해당하는 문자열을 찾음. “데이터I데이타” ‘데이터’ 또는 ‘데이타’에 해당하는 문자열을 찾음. [] [] 안에 나열된 패턴에 해당하는 문자열을 찾음. “[123]d” 대상 문자열에서 ‘1d’ 또는 ‘2d’…","frontmatter":{"categories":"SQL","title":"REGEXP","date":"January 19, 2022"},"fields":{"slug":"/regexp/"}}},{"node":{"id":"c13886d6-6305-583b-ab78-9c1281859f99","excerpt":"REST API REST는 Representational State Transfer라는 용어의 약자이다. REST API는 REST 아키텍처 스타일의 디자인 원칙을 준수하는 API입니다. 즉, HTTP URI(Uniform Resource Identifier)를 통해 자원(Resource)을 명시하고, HTTP Method를 통해 해당 자원에 CRUD연산을 적용하는 것을 의미한다. 구성 REST API는 다음으로 구성되어 있습니다. 자원(Resource) - URI 행위(Verb) - HTTP Method 표현(Representations) 디자인 가이드 1. REST API 중심 규칙 URI는 정보의 자원을 표현해야한다. 자원에 대한 행위는 HTTP Method로 표현한다. 2. URI 설계시 주의할 점 슬래시 구분자(/)는 계층 관계를 나타내는데 사용 URI 마지막 문자로 슬래시(/)를 포함하지 않는다. 하이픈(-)은 URI 가독성을 높이는데 사용 밑줄(_)은 URI에 사용하지…","frontmatter":{"categories":"네트워크 면접","title":"REST API","date":"January 19, 2022"},"fields":{"slug":"/REST-API/"}}}]},"site":{"siteMetadata":{"language":"ko","author":{"name":"우재석","bio":{"role":"개발자","description":["함께 일하고 싶은","지속 가능한"],"thumbnail":"sample.png"},"social":{"github":"https://github.com/JaeseokWoo","linkedIn":"","email":"jaeseokw@gmail.com"}}}}},"pageContext":{}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437","3350743975"]}