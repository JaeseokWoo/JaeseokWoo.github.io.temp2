{
    "componentChunkName": "component---src-templates-category-template-js",
    "path": "/posts/CPP",
    "result": {"pageContext":{"currentCategory":"CPP","categories":["All","JavaScript","CPP","Algorithm","SQL","네트워크","면접"],"edges":[{"node":{"id":"50258bff-b8b5-58c3-9c46-851eab0f31f8","excerpt":"sqrt C/C++에서 제곱근을 구해주는 함수입니다. 함수 원형과 사용법 헤더파일 C: <math.h> C++:  함수 원형 double sqrt(double x) float sqrt(float x) long double sqrt(long double x) 사용법 매개변수로 들어온 숫자에 루트를 적용한 값을 반환합니다. ex) 루트 9를 구하고 싶으면 참조 [C언어/C++] pow, sqrt 함수에 대해서(루트함수, 제곱, 제곱근) (tistory.com) 함수 원형과 사용법 헤더파일 함수 원형 사용법","fields":{"slug":"/sqrt/"},"frontmatter":{"categories":"CPP","title":"sqrt","date":"January 30, 2022"}},"next":{"fields":{"slug":"/to_string/"}},"previous":{"fields":{"slug":"/to_upper_case-to_lower_case/"}}},{"node":{"id":"6b3c69a7-b7c8-5b11-8f2c-e2c55281cf31","excerpt":"to_string c++에서 int를 string으로 변경하는 함수입니다. 함수 원형과 설명 헤더파일 함수 원형 string to_string (int num); string to_string (long num); string to_string (long long num); string to_string (unsigned num); string to_string (unsigned long num); string to_string (unsigned long long num); string to_string (float num); string to_string (double num); string to_string (long double num); 설명 to_string 함수는 숫자 자료형의 데이터를 안전하게 스트링 자료형으로 변경하도록 하는 함수입니다. 함수 오버로딩(overloading)을 통해 하나의 함수명에 다른 매개변수가 올 수 있습니다. 참조 [C++] to_string 함…","fields":{"slug":"/to_string/"},"frontmatter":{"categories":"CPP","title":"to_string","date":"January 30, 2022"}},"next":{"fields":{"slug":"/cpp-set/"}},"previous":{"fields":{"slug":"/sqrt/"}}},{"node":{"id":"7dc12f75-1ab7-597e-8cfb-849e2ebb85cf","excerpt":"Set C++의 Set은 노드 기반 컨테이너이며 균형 이진트리로 구현되어 있습니다. Key라 불리는 원소들의 집합으로 이루어진 컨테이너 입니다.(Key 중복X) 원소가 삽입되면 자동으로 정렬되고, default 정렬 기준은 오름차순입니다. 사용법  헤더 파일에 들어있습니다. 기본 선언 방법은  입니다. 생성자 멤버 함수 begin() 반환: 맨 첫번째 원소를 가리키는 반복자를 리턴(참조) 예시:  end() 반환: 맨 마지막 원소의 다음을 가리키는 반복자를 리턴(참조) 예시:  rbegin(), rend() begin(), end()와 반대로 작동하는 멤버함수 역으로 출력하고 싶을 때 사용 예시: clear() 모든 원소를 제거, 초기화할 때 사용 예시:  count(k) 원소 k의 갯수를 반환, set은 항상 0, 1을 반환 예시:  empty() 비어있는지 확인, 반환은 true, false 예시:  insert(k) 원소 k를 삽입합니다. 반환:  pair.first: 삽입한…","fields":{"slug":"/cpp-set/"},"frontmatter":{"categories":"CPP","title":"Set","date":"January 28, 2022"}},"next":{"fields":{"slug":"/Math-max/"}},"previous":{"fields":{"slug":"/to_string/"}}},{"node":{"id":"72bfe130-275b-59bb-bcce-f6b57fa8696f","excerpt":"EOF 가끔 백준 알고리즘 문제를 풀다보면 입력의 마지막 조건을 알려주지 않는 문제들이 있다. 이럴 때 사용하는 케이스들을 정리하려고 한다. 1. scanf()가 입력받은 인자의 갯수를 리턴하는 특성 활용 scanf()는 입력받은 갯수를 리턴하기 때문에 이를 활용하여 입력을 받았는지 확인할 수 있다. 2. scanf()를 EOF와 직접 비교 EOF = End Of File을 뜻한다. 즉, 파일의 끝에 도달했는지 확인하여 입력을 받았는지 확인할 수 있다. 3. EOF가 상수 -1로 정의되어 있는 특성 활용 EOF는 상수 -1로 정의 되어 있기 때문에 EOF인지 확인하는 방법과 -1인지 확인하는 방법이 같다. 4. cin.eof() 활용 cin으로 입력 받은 값이 없으면 cin.eof()는 true를 반환한다. 이것을 활용하여 입력을 받았는지 확인할 수 있다. 참조 C++ EOF 처리 방법 ( 백준 10951 A+B - 4 ) (tistory.com) 1. scanf()가 입력받은 인…","fields":{"slug":"/eof/"},"frontmatter":{"categories":"CPP","title":"EOF","date":"January 27, 2022"}},"next":{"fields":{"slug":"/euclidean-algorithm/"}},"previous":{"fields":{"slug":"/Math-max/"}}}]}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}