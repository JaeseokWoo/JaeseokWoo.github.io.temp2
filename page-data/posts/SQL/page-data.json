{
    "componentChunkName": "component---src-templates-category-template-js",
    "path": "/posts/SQL",
    "result": {"pageContext":{"currentCategory":"SQL","categories":["All","Algorithm","SQL","네트워크","면접","블로그","featured"],"edges":[{"node":{"id":"c72c5538-0d5c-55f6-a921-eabe94264015","excerpt":"메모리 상에 가상의 테이블을 저장 재퀴 쿼리를 이용하여 실제로 테이블을 생성하거나 데이터 삽입(INSERT)을 하지 않아도 가상 테이블을 생성할 수 있다. 📝예시 hour(컬럼)이  초기값 0부터 제어문에 합당하는 23까지의 데이터를 갖는 가상 테이블 생성 📝예시","fields":{"slug":"/with-recursive/"},"frontmatter":{"categories":"SQL","title":"WITH RECURSIVE","date":"January 21, 2022"}},"next":{"fields":{"slug":"/http-https/"}},"previous":{"fields":{"slug":"/euler-phi/"}}},{"node":{"id":"b1a183d0-fade-50d2-9919-ae25ce20a07a","excerpt":"REGEXP는 LIKE를 이용한 검색과 달리 Regular Expression(정규 표현식)을 이용해 검색한다. REGEXP를 사용하면 SQL에서 정규표현식을 활용하여 기본 연산자보다 복잡한 문자열 조건을 걸어 데이터를 검색할 수 있다. Regular Expression(정규 표현식) 정규 표현식은 특정한 규칙을 가진 문자열의 집합을 표현하는데 사용하는 형식 언어이다. 문자열을 처리하는 방법 중의 하나로, 특정한 조건의 문자를 검색하거나 치환할 때 매우 간쳔하게 처리할 수 있도록 해준다. 정규 표현식은 Pattern을 사용해 문자열을 처리한다. Matching Pattern 기능 예시 설명 . 문자 하나 ”…” 문자열의 길이가 세 글자 이상인 것을 찾음. I I로 구분된 문자에 해당하는 문자열을 찾음. “데이터I데이타” ‘데이터’ 또는 ‘데이타’에 해당하는 문자열을 찾음. [] [] 안에 나열된 패턴에 해당하는 문자열을 찾음. “[123]d” 대상 문자열에서 ‘1d’ 또는 ‘2d’…","fields":{"slug":"/regexp/"},"frontmatter":{"categories":"SQL","title":"REGEXP","date":"January 19, 2022"}},"next":{"fields":{"slug":"/REST-API/"}},"previous":{"fields":{"slug":"/http-https/"}}}]}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}