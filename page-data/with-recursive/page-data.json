{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/with-recursive/",
    "result": {"data":{"cur":{"id":"c72c5538-0d5c-55f6-a921-eabe94264015","html":"<ul>\n<li>메모리 상에 가상의 테이블을 저장</li>\n<li>재퀴 쿼리를 이용하여 실제로 테이블을 생성하거나 데이터 삽입(INSERT)을 하지 않아도 가상 테이블을 생성할 수 있다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">WITH</span> RECURSIVE 테이블명 <span class=\"token keyword\">AS</span> <span class=\"token punctuation\">(</span>\r\n\t<span class=\"token keyword\">SELECT</span> 초기값 <span class=\"token keyword\">AS</span> 컬럼별명<span class=\"token number\">1</span>\r\n\t<span class=\"token keyword\">UNION</span> <span class=\"token keyword\">ALL</span>\r\n\t<span class=\"token keyword\">SELECT</span> 컬럼별명<span class=\"token number\">1</span> 계산식 <span class=\"token keyword\">FROM</span> 테이블명 <span class=\"token keyword\">WHERE</span> 제어문\r\n<span class=\"token punctuation\">)</span></code></pre></div>\n<h3 id=\"예시\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%8B%9C\" aria-label=\"예시 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📝예시</h3>\n<p>hour(컬럼)이  초기값 0부터 제어문에 합당하는 23까지의 데이터를 갖는 가상 테이블 생성</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">WITH</span> RECURSIVE MY_HOUR_TABLE <span class=\"token keyword\">AS</span> <span class=\"token punctuation\">(</span>\r\n\t<span class=\"token keyword\">SELECT</span> <span class=\"token number\">0</span> <span class=\"token keyword\">AS</span> <span class=\"token keyword\">hour</span>\r\n\t<span class=\"token keyword\">UNION</span> <span class=\"token keyword\">ALL</span>\r\n\t<span class=\"token keyword\">SELECT</span> <span class=\"token keyword\">hour</span><span class=\"token operator\">+</span><span class=\"token number\">1</span> <span class=\"token keyword\">FROM</span> MY_HOUR_TABLE <span class=\"token keyword\">WHERE</span> <span class=\"token keyword\">hour</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">23</span>\r\n<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#%EC%98%88%EC%8B%9C\">📝예시</a></li>\n</ul>\n</div>","excerpt":"메모리 상에 가상의 테이블을 저장 재퀴 쿼리를 이용하여 실제로 테이블을 생성하거나 데이터 삽입(INSERT)을 하지 않아도 가상 테이블을 생성할 수 있다. 📝예시 hour(컬럼)이  초기값 0부터 제어문에 합당하는 23까지의 데이터를 갖는 가상 테이블 생성 📝예시","frontmatter":{"date":"January 21, 2022","title":"WITH RECURSIVE","categories":"SQL","author":"JaeseokWoo","emoji":"💾"},"fields":{"slug":"/with-recursive/"}},"next":{"id":"b1a183d0-fade-50d2-9919-ae25ce20a07a","html":"<p>REGEXP는 LIKE를 이용한 검색과 달리 Regular Expression(정규 표현식)을 이용해 검색한다.</p>\n<p>REGEXP를 사용하면 SQL에서 정규표현식을 활용하여 기본 연산자보다 복잡한 문자열 조건을 걸어 데이터를 검색할 수 있다.</p>\n<h2 id=\"regular-expression정규-표현식\" style=\"position:relative;\"><a href=\"#regular-expression%EC%A0%95%EA%B7%9C-%ED%91%9C%ED%98%84%EC%8B%9D\" aria-label=\"regular expression정규 표현식 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Regular Expression(정규 표현식)</h2>\n<p>정규 표현식은 특정한 규칙을 가진 문자열의 집합을 표현하는데 사용하는 형식 언어이다.</p>\n<p>문자열을 처리하는 방법 중의 하나로, 특정한 조건의 문자를 검색하거나 치환할 때 매우 간쳔하게 처리할 수 있도록 해준다.</p>\n<p>정규 표현식은 Pattern을 사용해 문자열을 처리한다.</p>\n<h3 id=\"matching\" style=\"position:relative;\"><a href=\"#matching\" aria-label=\"matching permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Matching</h3>\n<table>\n<thead>\n<tr>\n<th>Pattern</th>\n<th>기능</th>\n<th>예시</th>\n<th>설명</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>.</td>\n<td>문자 하나</td>\n<td>”…”</td>\n<td>문자열의 길이가 세 글자 이상인 것을 찾음.</td>\n</tr>\n<tr>\n<td>I</td>\n<td>I로 구분된 문자에 해당하는 문자열을 찾음.</td>\n<td>“데이터I데이타”</td>\n<td>‘데이터’ 또는 ‘데이타’에 해당하는 문자열을 찾음.</td>\n</tr>\n<tr>\n<td>[]</td>\n<td>[] 안에 나열된 패턴에 해당하는 문자열을 찾음.</td>\n<td>“[123]d”</td>\n<td>대상 문자열에서 ‘1d’ 또는 ‘2d’ 또는 ‘3d’인 문자열을 찾음.</td>\n</tr>\n<tr>\n<td>^</td>\n<td>시작하는 문자열을 찾음.</td>\n<td>“^안녕”</td>\n<td>대상 문자열에서 ‘안녕’으로 시작하는 문자열을 찾음.</td>\n</tr>\n<tr>\n<td>$</td>\n<td>끝나는 문자열을 찾음.</td>\n<td>“잘가$”</td>\n<td>대상 문자열에서 ‘잘가’로 끝나는 문자열을 찾음.</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"numbers-limit\" style=\"position:relative;\"><a href=\"#numbers-limit\" aria-label=\"numbers limit permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Numbers Limit</h3>\n<table>\n<thead>\n<tr>\n<th>Pattern</th>\n<th>기능</th>\n<th>예시</th>\n<th>설명</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>*</td>\n<td>0회 이상 나타나는 문자</td>\n<td>“a*”</td>\n<td>‘a’가 0번 이상 등장하는 문자열을 찾음. ‘b’, ‘a’, ‘aa’ 모두 해당.</td>\n</tr>\n<tr>\n<td>+</td>\n<td>1회 이상 나타나는 문자</td>\n<td>“국+”</td>\n<td>‘국’이 1번 이상 등장하는 문자열을 찾음. ‘한국’, ‘미역국’, ‘국거리’ 모두 해당.</td>\n</tr>\n<tr>\n<td>{m,n}</td>\n<td>m회 이상 n회 이하 반복되는 문자</td>\n<td>“치{1,2}”</td>\n<td>‘치’가 1회 이상 2회 이하 반복하는 문자열을 찾음. ‘치커리’, ‘치카치카’ 모두 해당.</td>\n</tr>\n<tr>\n<td>?</td>\n<td>0~1회 나타나는 문자</td>\n<td>“[가나다]?”</td>\n<td>‘가’ 또는 ‘나’ 또는 ‘다’가 0~1회 등장하는 문자열을 찾음. ‘가지마’, ‘나라’, ‘안녕’ 모두 해당.</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"string-group\" style=\"position:relative;\"><a href=\"#string-group\" aria-label=\"string group permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>String Group</h3>\n<table>\n<thead>\n<tr>\n<th>Pattern</th>\n<th>기능</th>\n<th>예시</th>\n<th>설명</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>[A-z] 또는 [:alpha:] 또는 \\a</td>\n<td>알파벳 대문자 또는 소문자인 문자열을 찾음</td>\n<td>“[A-z]+”</td>\n<td>대상 문자열에서 알파벳이 한 개 이상인 문자열을 찾음</td>\n</tr>\n<tr>\n<td>[0-9] 또는 [:digit:] 또는 \\d</td>\n<td>숫자인 문자열을 찾음</td>\n<td>“[0-9]+”</td>\n<td>대상 문자열에서 숫자가 한 개 이상인 문자열을 찾음</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"not\" style=\"position:relative;\"><a href=\"#not\" aria-label=\"not permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Not</h3>\n<table>\n<thead>\n<tr>\n<th>Pattern</th>\n<th>기능</th>\n<th>예시</th>\n<th>설명</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>[^문자]</td>\n<td>괄호 안의 문자를 포함하지 않은 문자열을 찾음</td>\n<td>”[^길로그]”</td>\n<td>‘길’ 또는 ‘로’ 또는 ‘그’를 포함하지 않는 문자열을 찾음. ‘길가’, ‘로그’, ‘그리고’ 모두 제외됨.</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"참조\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EC%A1%B0\" aria-label=\"참조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참조</h2>\n<p><a href=\"https://velog.io/@gillog/MySQL-REGEXPRegular-Expression%EC%A0%95%EA%B7%9C-%ED%91%9C%ED%98%84%EC%8B%9D\">[MySQL] REGEXP(Regular Expression(정규 표현식)) (velog.io)</a></p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#regular-expression%EC%A0%95%EA%B7%9C-%ED%91%9C%ED%98%84%EC%8B%9D\">Regular Expression(정규 표현식)</a></p>\n<ul>\n<li><a href=\"#matching\">Matching</a></li>\n<li><a href=\"#numbers-limit\">Numbers Limit</a></li>\n<li><a href=\"#string-group\">String Group</a></li>\n<li><a href=\"#not\">Not</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%B0%B8%EC%A1%B0\">참조</a></p>\n</li>\n</ul>\n</div>","frontmatter":{"date":"January 19, 2022","title":"REGEXP","categories":"SQL","author":"JaeseokWoo","emoji":"💾"},"fields":{"slug":"/regexp/"}},"prev":{"id":"c3706ced-92da-5fe3-b2c5-91754f6e00f9","html":"<p>n이 양의 정수일 때, ϕ(<em>n</em>)를 구하는 함수이다.</p>\n<p>ϕ(<em>n</em>)은 1부터 n까지의 n과 서로소(최대공약수가 1인 관계)인 수를 나타낸다.</p>\n<h2 id=\"항등식\" style=\"position:relative;\"><a href=\"#%ED%95%AD%EB%93%B1%EC%8B%9D\" aria-label=\"항등식 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>항등식</h2>\n<p>만약 두 정수 m, n이 서로소라면, 다음이 성립힌다.</p>\n<p>ϕ(mn) = ϕ(m)ϕ(<em>n</em>)</p>\n<p>오일러 피 함수 값은 소인수(소수의 인수)를 통해  다음과 같이 구할 수 있다.</p>\n<p><img src=\"https://wikimedia.org/api/rest_v1/media/math/render/svg/f435f9cc2f15d34d49245f30d4d85a8cc678fa9d\" alt=\"https://wikimedia.org/api/rest_v1/media/math/render/svg/f435f9cc2f15d34d49245f30d4d85a8cc678fa9d\"></p>\n<p>오일러 곱 공식이라고 불린다.</p>\n<h3 id=\"-예제\" style=\"position:relative;\"><a href=\"#-%EC%98%88%EC%A0%9C\" aria-label=\" 예제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📝 예제</h3>\n<p><img src=\"https://wikimedia.org/api/rest_v1/media/math/render/svg/3ec5709cc7b8119ce7526f223fb42bfd84304286\" alt=\"https://wikimedia.org/api/rest_v1/media/math/render/svg/3ec5709cc7b8119ce7526f223fb42bfd84304286\"></p>\n<h3 id=\"알고리즘\" style=\"position:relative;\"><a href=\"#%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98\" aria-label=\"알고리즘 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>알고리즘</h3>\n<ol>\n<li>1부터 n까지 증가하면서 최대공약수가 1인 확인하여 구하는 방법</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">gcd</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\r\n        <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">return</span> <span class=\"token function\">gcd</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span> a <span class=\"token operator\">%</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token keyword\">int</span> <span class=\"token function\">phi</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\r\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">gcd</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\r\n            result<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ol start=\"2\">\n<li>오일러 곱 공식 구현</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">phi</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">{</span>\r\n     \r\n    <span class=\"token comment\">// Initialize result as n</span>\r\n    <span class=\"token keyword\">float</span> result <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span>\r\n  \r\n    <span class=\"token comment\">// Consider all prime factors of n</span>\r\n    <span class=\"token comment\">// and for every prime factor p,</span>\r\n    <span class=\"token comment\">// multiply result with (1 - 1/p)</span>\r\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> p <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> p <span class=\"token operator\">*</span> p <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>p<span class=\"token punctuation\">)</span>\r\n    <span class=\"token punctuation\">{</span>\r\n         \r\n        <span class=\"token comment\">// Check if p is a prime factor.</span>\r\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">%</span> p <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\r\n        <span class=\"token punctuation\">{</span>\r\n             \r\n            <span class=\"token comment\">// If yes, then update n and result</span>\r\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">%</span> p <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\r\n                n <span class=\"token operator\">/=</span> p<span class=\"token punctuation\">;</span>\r\n                 \r\n            result <span class=\"token operator\">*=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1.0</span> <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1.0</span> <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token punctuation\">}</span>\r\n    <span class=\"token punctuation\">}</span>\r\n  \r\n    <span class=\"token comment\">// If n has a prime factor greater than sqrt(n)</span>\r\n    <span class=\"token comment\">// (There can be at-most one such prime factor)</span>\r\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\r\n        result <span class=\"token operator\">*=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1.0</span> <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1.0</span> <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n  \r\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>result<span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ol start=\"3\">\n<li>위의 float 사용하지 않는 방법</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">phi</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">{</span>\r\n    <span class=\"token comment\">// Initialize result as n</span>\r\n    <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span>\r\n  \r\n    <span class=\"token comment\">// Consider all prime factors of n</span>\r\n    <span class=\"token comment\">// and subtract their multiples</span>\r\n    <span class=\"token comment\">// from result</span>\r\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> p <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> p <span class=\"token operator\">*</span> p <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>p<span class=\"token punctuation\">)</span>\r\n    <span class=\"token punctuation\">{</span>\r\n         \r\n        <span class=\"token comment\">// Check if p is a prime factor.</span>\r\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">%</span> p <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\r\n        <span class=\"token punctuation\">{</span>\r\n             \r\n            <span class=\"token comment\">// If yes, then update n and result</span>\r\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">%</span> p <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\r\n                n <span class=\"token operator\">/=</span> p<span class=\"token punctuation\">;</span>\r\n                 \r\n            result <span class=\"token operator\">-=</span> result <span class=\"token operator\">/</span> p<span class=\"token punctuation\">;</span>\r\n        <span class=\"token punctuation\">}</span>\r\n    <span class=\"token punctuation\">}</span>\r\n  \r\n    <span class=\"token comment\">// If n has a prime factor greater than sqrt(n)</span>\r\n    <span class=\"token comment\">// (There can be at-most one such prime factor)</span>\r\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\r\n        result <span class=\"token operator\">-=</span> result <span class=\"token operator\">/</span> n<span class=\"token punctuation\">;</span>\r\n         \r\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"특징\" style=\"position:relative;\"><a href=\"#%ED%8A%B9%EC%A7%95\" aria-label=\"특징 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>특징</h3>\n<ol>\n<li>p가 소수일 때, p^k의 오일러 피 함수의 값은</li>\n</ol>\n<p><img src=\"https://wikimedia.org/api/rest_v1/media/math/render/svg/a72a268fc759dddb08a75ea99641b8071f90ec38\" alt=\"https://wikimedia.org/api/rest_v1/media/math/render/svg/a72a268fc759dddb08a75ea99641b8071f90ec38\"></p>\n<ol>\n<li>소수 p의 오일러 피 함수의 값은</li>\n</ol>\n<p><img src=\"https://wikimedia.org/api/rest_v1/media/math/render/svg/4c0c04fbbc0accfa891e42552bcdb395604bba12\" alt=\"https://wikimedia.org/api/rest_v1/media/math/render/svg/4c0c04fbbc0accfa891e42552bcdb395604bba12\"></p>\n<h2 id=\"참조\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EC%A1%B0\" aria-label=\"참조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참조</h2>\n<p><a href=\"https://www.geeksforgeeks.org/eulers-totient-function/\">Euler’s Totient Function - GeeksforGeeks</a></p>\n<p><a href=\"https://ko.wikipedia.org/wiki/%EC%98%A4%EC%9D%BC%EB%9F%AC_%ED%94%BC_%ED%95%A8%EC%88%98\">오일러 피 함수 - 위키백과, 우리 모두의 백과사전 (wikipedia.org)</a></p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%ED%95%AD%EB%93%B1%EC%8B%9D\">항등식</a></p>\n<ul>\n<li><a href=\"#-%EC%98%88%EC%A0%9C\">📝 예제</a></li>\n<li><a href=\"#%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98\">알고리즘</a></li>\n<li><a href=\"#%ED%8A%B9%EC%A7%95\">특징</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%B0%B8%EC%A1%B0\">참조</a></p>\n</li>\n</ul>\n</div>","frontmatter":{"date":"January 22, 2022","title":"Euler’s phi","categories":"Algorithm","author":"JaeseokWoo","emoji":"🧩"},"fields":{"slug":"/euler-phi/"}},"site":{"siteMetadata":{"siteUrl":"https://jaeseokwoo.github.io","comments":{"utterances":{"repo":"JaeseokWoo/JaeseokWoo.github.io"}}}}},"pageContext":{"slug":"/with-recursive/","nextSlug":"/regexp/","prevSlug":"/euler-phi/"}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}