{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/with-recursive/",
    "result": {"data":{"cur":{"id":"c72c5538-0d5c-55f6-a921-eabe94264015","html":"<ul>\n<li>메모리 상에 가상의 테이블을 저장</li>\n<li>재퀴 쿼리를 이용하여 실제로 테이블을 생성하거나 데이터 삽입(INSERT)을 하지 않아도 가상 테이블을 생성할 수 있다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">WITH</span> RECURSIVE 테이블명 <span class=\"token keyword\">AS</span> <span class=\"token punctuation\">(</span>\r\n\t<span class=\"token keyword\">SELECT</span> 초기값 <span class=\"token keyword\">AS</span> 컬럼별명<span class=\"token number\">1</span>\r\n\t<span class=\"token keyword\">UNION</span> <span class=\"token keyword\">ALL</span>\r\n\t<span class=\"token keyword\">SELECT</span> 컬럼별명<span class=\"token number\">1</span> 계산식 <span class=\"token keyword\">FROM</span> 테이블명 <span class=\"token keyword\">WHERE</span> 제어문\r\n<span class=\"token punctuation\">)</span></code></pre></div>\n<h3 id=\"예시\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%8B%9C\" aria-label=\"예시 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📝예시</h3>\n<p>hour(컬럼)이  초기값 0부터 제어문에 합당하는 23까지의 데이터를 갖는 가상 테이블 생성</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">WITH</span> RECURSIVE MY_HOUR_TABLE <span class=\"token keyword\">AS</span> <span class=\"token punctuation\">(</span>\r\n\t<span class=\"token keyword\">SELECT</span> <span class=\"token number\">0</span> <span class=\"token keyword\">AS</span> <span class=\"token keyword\">hour</span>\r\n\t<span class=\"token keyword\">UNION</span> <span class=\"token keyword\">ALL</span>\r\n\t<span class=\"token keyword\">SELECT</span> <span class=\"token keyword\">hour</span><span class=\"token operator\">+</span><span class=\"token number\">1</span> <span class=\"token keyword\">FROM</span> MY_HOUR_TABLE <span class=\"token keyword\">WHERE</span> <span class=\"token keyword\">hour</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">23</span>\r\n<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#%EC%98%88%EC%8B%9C\">📝예시</a></li>\n</ul>\n</div>","excerpt":"메모리 상에 가상의 테이블을 저장 재퀴 쿼리를 이용하여 실제로 테이블을 생성하거나 데이터 삽입(INSERT)을 하지 않아도 가상 테이블을 생성할 수 있다. 📝예시 hour(컬럼)이  초기값 0부터 제어문에 합당하는 23까지의 데이터를 갖는 가상 테이블 생성 📝예시","frontmatter":{"date":"January 21, 2022","title":"WITH RECURSIVE","categories":"SQL","author":"JaeseokWoo","emoji":"💾"},"fields":{"slug":"/with-recursive/"}},"next":{"id":"07d6d208-1c69-5bf1-b465-ceea328b9472","html":"<h1 id=\"1-httphyper-text-transfer-protocol\" style=\"position:relative;\"><a href=\"#1-httphyper-text-transfer-protocol\" aria-label=\"1 httphyper text transfer protocol permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. HTTP(Hyper Text Transfer Protocol)</h1>\n<p>서버와 클라이언트가 데이터를 주고받기 위한 프로토콜입니다.</p>\n<p>즉 서버는 80번 포트에서 요청을 대기하고 있고, 클라이언트는 80번 포트로 요청을 보내게 됩니다.</p>\n<h2 id=\"http-구조\" style=\"position:relative;\"><a href=\"#http-%EA%B5%AC%EC%A1%B0\" aria-label=\"http 구조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>HTTP 구조</h2>\n<p>HTTP는 애플리케이션 레벨의 프로토콜로 TCP/IP 위에서 동작합니다.</p>\n<p>HTTP는 상태를 가지고 있지 않는 Stateless 프로토콜이며, Method, Path, Version, Headers, Body 등으로 구성되어 있습니다.</p>\n<p><img src=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&#x26;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FbkdJ4Q%2FbtqK6AXLEtC%2FjBZzMuJBWzdLYmqILo5Ri1%2Fimg.png\" alt=\"사진\"></p>\n<p>하지만 HTTP는 암호화가 되지 않은 평문 데이트를 전송하는 프로토콜이기 때문에, 제3자가 정보를 조회할 수 있는 보안적인 문제가 있다.</p>\n<h1 id=\"2-httpshyper-text-transfer-protocol-secure\" style=\"position:relative;\"><a href=\"#2-httpshyper-text-transfer-protocol-secure\" aria-label=\"2 httpshyper text transfer protocol secure permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. HTTPS(Hyper Text Transfer Protocol Secure)</h1>\n<p>HTTP에 데이터 암호화가 추가된 프로토콜입니다. 443번 포트를 사용하며, 제3자가 정보를 볼 수 없도록 암호화를 지원합니다.</p>\n<h2 id=\"https의-동작-과정\" style=\"position:relative;\"><a href=\"#https%EC%9D%98-%EB%8F%99%EC%9E%91-%EA%B3%BC%EC%A0%95\" aria-label=\"https의 동작 과정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>HTTPS의 동작 과정</h2>\n<p>HTTPS는 대칭키 암호화와 비대칭 키 암호화를 모두 사용하여 암호화를 합니다.</p>\n<p>HTTPS 연결 과정(Hand-Shaking)에서는 먼저 서버와 클라이언트 간에 세션키(주고 받는 데이터를 암호화하기 위해 사용되는 대칭키, 빠른 연산 속도가 필요하므로 세션키는 대칭키로 사용)를 교환합니다.</p>\n<p>서버와 클라이언트가 세션키를 가지기 위해 비대칭키가 사용됩니다.</p>\n<p>즉, 처음 연결을 성립하여 세션키를 공유하기 위해 비대칭키가 사용되고 이후에는 대칭키를 이용하여 데이터를 교환합니다.</p>\n<h3 id=\"연결-과정-흐름\" style=\"position:relative;\"><a href=\"#%EC%97%B0%EA%B2%B0-%EA%B3%BC%EC%A0%95-%ED%9D%90%EB%A6%84\" aria-label=\"연결 과정 흐름 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>연결 과정 흐름</h3>\n<ol>\n<li>클라이언트가 서버로 최초 연결 시도</li>\n<li>서버는 공개키(인증서)를 브라우저에게 전달</li>\n<li>브라우저는 인증서의 유효성을 검사하고 세션키를 발급</li>\n<li>브라우저는 세션키를 보관하고 서버의 공개키로 세션키를 암호화하여 서버로 전송</li>\n<li>서버는 개인키로 복호화하여 세션키를 얻음</li>\n<li>클라이언트와 서버는 동일한 세션키를 공유하여 데이터를 전달할 때 암호화/복호화를 진행</li>\n</ol>\n<p><img src=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&#x26;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FcCodLU%2FbtrqRZnoOFq%2Fe6kFHjADoVby70466Jkq51%2Fimg.png\" alt=\"사진\"></p>\n<h3 id=\"https-발급-과정\" style=\"position:relative;\"><a href=\"#https-%EB%B0%9C%EA%B8%89-%EA%B3%BC%EC%A0%95\" aria-label=\"https 발급 과정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>HTTPS 발급 과정</h3>\n<ol>\n<li>A기업은 HTTPS를 적용하기 위해 공개키/개인키를 발급함</li>\n<li>A기업은 CA(인증기관) 기업에게 공개키를 저장하는 인증서의 발급을 요청</li>\n<li>CA 기업은 CA 기업의 이름, A 기업 서버의 공개키와 정보 등을 기반으로 인증서를 생성하고, CA 기업의 개인키로 암호화하여 A 기업에게 제공</li>\n<li>A기업은 클라이언트에게 요청이 오면 암호화된 인증서를 제공</li>\n<li>클라이언트 브라우저는 CA 기업의 공개키를 미리 가지고 있고, 암호화된 인증서를 복호화하여 A 기업의 공개키를 얻음</li>\n</ol>\n<p>즉, 인증서는 CA의 개인키로 암호화되어있고, 클라이언트는 A 기업의 공개키로 데이터를 암호화하고 A기업만 복호화를 통해 데이터를 얻을 수 있다.</p>\n<h1 id=\"참조\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EC%A1%B0\" aria-label=\"참조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참조</h1>\n<p><a href=\"https://mangkyu.tistory.com/98\">[Web] HTTP와 HTTPS 및 차이점 - MangKyu’s Diary (tistory.com)</a></p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#http-%EA%B5%AC%EC%A1%B0\">HTTP 구조</a></p>\n</li>\n<li>\n<p><a href=\"#https%EC%9D%98-%EB%8F%99%EC%9E%91-%EA%B3%BC%EC%A0%95\">HTTPS의 동작 과정</a></p>\n<ul>\n<li><a href=\"#%EC%97%B0%EA%B2%B0-%EA%B3%BC%EC%A0%95-%ED%9D%90%EB%A6%84\">연결 과정 흐름</a></li>\n<li><a href=\"#https-%EB%B0%9C%EA%B8%89-%EA%B3%BC%EC%A0%95\">HTTPS 발급 과정</a></li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"January 19, 2022","title":"HTTP와 HTTPS","categories":"네트워크 면접","author":"JaeseokWoo","emoji":"🌐"},"fields":{"slug":"/http-https/"}},"prev":{"id":"c3706ced-92da-5fe3-b2c5-91754f6e00f9","html":"<p>n이 양의 정수일 때, ϕ(<em>n</em>)를 구하는 함수이다.</p>\n<p>ϕ(<em>n</em>)은 1부터 n까지의 n과 서로소(최대공약수가 1인 관계)인 수를 나타낸다.</p>\n<h2 id=\"항등식\" style=\"position:relative;\"><a href=\"#%ED%95%AD%EB%93%B1%EC%8B%9D\" aria-label=\"항등식 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>항등식</h2>\n<p>만약 두 정수 m, n이 서로소라면, 다음이 성립힌다.</p>\n<p>ϕ(mn) = ϕ(m)ϕ(<em>n</em>)</p>\n<p>오일러 피 함수 값은 소인수(소수의 인수)를 통해  다음과 같이 구할 수 있다.</p>\n<p><img src=\"https://wikimedia.org/api/rest_v1/media/math/render/svg/f435f9cc2f15d34d49245f30d4d85a8cc678fa9d\" alt=\"https://wikimedia.org/api/rest_v1/media/math/render/svg/f435f9cc2f15d34d49245f30d4d85a8cc678fa9d\"></p>\n<p>오일러 곱 공식이라고 불린다.</p>\n<h3 id=\"-예제\" style=\"position:relative;\"><a href=\"#-%EC%98%88%EC%A0%9C\" aria-label=\" 예제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📝 예제</h3>\n<p><img src=\"https://wikimedia.org/api/rest_v1/media/math/render/svg/3ec5709cc7b8119ce7526f223fb42bfd84304286\" alt=\"https://wikimedia.org/api/rest_v1/media/math/render/svg/3ec5709cc7b8119ce7526f223fb42bfd84304286\"></p>\n<h3 id=\"알고리즘\" style=\"position:relative;\"><a href=\"#%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98\" aria-label=\"알고리즘 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>알고리즘</h3>\n<ol>\n<li>1부터 n까지 증가하면서 최대공약수가 1인 확인하여 구하는 방법</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">gcd</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">gcd</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span> a <span class=\"token operator\">%</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">phi</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">gcd</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n            result<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ol start=\"2\">\n<li>오일러 곱 공식 구현</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">phi</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     \n    <span class=\"token comment\">// Initialize result as n</span>\n    <span class=\"token keyword\">float</span> result <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span>\n  \n    <span class=\"token comment\">// Consider all prime factors of n</span>\n    <span class=\"token comment\">// and for every prime factor p,</span>\n    <span class=\"token comment\">// multiply result with (1 - 1/p)</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> p <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> p <span class=\"token operator\">*</span> p <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>p<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n         \n        <span class=\"token comment\">// Check if p is a prime factor.</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">%</span> p <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n             \n            <span class=\"token comment\">// If yes, then update n and result</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">%</span> p <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n                n <span class=\"token operator\">/=</span> p<span class=\"token punctuation\">;</span>\n                 \n            result <span class=\"token operator\">*=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1.0</span> <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1.0</span> <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  \n    <span class=\"token comment\">// If n has a prime factor greater than sqrt(n)</span>\n    <span class=\"token comment\">// (There can be at-most one such prime factor)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        result <span class=\"token operator\">*=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1.0</span> <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1.0</span> <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ol start=\"3\">\n<li>위의 float 사용하지 않는 방법</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">phi</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Initialize result as n</span>\n    <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span>\n  \n    <span class=\"token comment\">// Consider all prime factors of n</span>\n    <span class=\"token comment\">// and subtract their multiples</span>\n    <span class=\"token comment\">// from result</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> p <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> p <span class=\"token operator\">*</span> p <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>p<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n         \n        <span class=\"token comment\">// Check if p is a prime factor.</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">%</span> p <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n             \n            <span class=\"token comment\">// If yes, then update n and result</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">%</span> p <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n                n <span class=\"token operator\">/=</span> p<span class=\"token punctuation\">;</span>\n                 \n            result <span class=\"token operator\">-=</span> result <span class=\"token operator\">/</span> p<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  \n    <span class=\"token comment\">// If n has a prime factor greater than sqrt(n)</span>\n    <span class=\"token comment\">// (There can be at-most one such prime factor)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        result <span class=\"token operator\">-=</span> result <span class=\"token operator\">/</span> n<span class=\"token punctuation\">;</span>\n         \n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"특징\" style=\"position:relative;\"><a href=\"#%ED%8A%B9%EC%A7%95\" aria-label=\"특징 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>특징</h3>\n<ol>\n<li>p가 소수일 때, p^k의 오일러 피 함수의 값은</li>\n</ol>\n<p><img src=\"https://wikimedia.org/api/rest_v1/media/math/render/svg/a72a268fc759dddb08a75ea99641b8071f90ec38\" alt=\"https://wikimedia.org/api/rest_v1/media/math/render/svg/a72a268fc759dddb08a75ea99641b8071f90ec38\"></p>\n<ol>\n<li>소수 p의 오일러 피 함수의 값은</li>\n</ol>\n<p><img src=\"https://wikimedia.org/api/rest_v1/media/math/render/svg/4c0c04fbbc0accfa891e42552bcdb395604bba12\" alt=\"https://wikimedia.org/api/rest_v1/media/math/render/svg/4c0c04fbbc0accfa891e42552bcdb395604bba12\"></p>\n<h2 id=\"참조\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EC%A1%B0\" aria-label=\"참조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참조</h2>\n<p><a href=\"https://www.geeksforgeeks.org/eulers-totient-function/\">Euler’s Totient Function - GeeksforGeeks</a></p>\n<p><a href=\"https://ko.wikipedia.org/wiki/%EC%98%A4%EC%9D%BC%EB%9F%AC_%ED%94%BC_%ED%95%A8%EC%88%98\">오일러 피 함수 - 위키백과, 우리 모두의 백과사전 (wikipedia.org)</a></p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%ED%95%AD%EB%93%B1%EC%8B%9D\">항등식</a></p>\n<ul>\n<li><a href=\"#-%EC%98%88%EC%A0%9C\">📝 예제</a></li>\n<li><a href=\"#%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98\">알고리즘</a></li>\n<li><a href=\"#%ED%8A%B9%EC%A7%95\">특징</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%B0%B8%EC%A1%B0\">참조</a></p>\n</li>\n</ul>\n</div>","frontmatter":{"date":"January 22, 2022","title":"Euler’s phi","categories":"Algorithm","author":"JaeseokWoo","emoji":"🧩"},"fields":{"slug":"/euler-phi/"}},"site":{"siteMetadata":{"siteUrl":"https://jaeseokwoo.github.io","comments":{"utterances":{"repo":"JaeseokWoo/JaeseokWoo.github.io"}}}}},"pageContext":{"slug":"/with-recursive/","nextSlug":"/http-https/","prevSlug":"/euler-phi/"}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}